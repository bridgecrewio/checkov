AWSTemplateFormatVersion: "2010-09-09"
Description: This template deploys microservice to a ECS cluster with Fargate.
Parameters:
  AppName:
    Description: Tech stack name to use when constructing resource names
    Type: String

  ApplicationIAMRole:
    Description: "IAM Role for the application"
    Type: String

  CloudformationBucket:
    Type: String

  DockerImage:
    Description: Placeholder image for the primeval task definition
    Type: String
    Default: moodysanalytics.jfrog.io/

  env:
    Type: String
    Default: dev

  version:
    Type: String

  AWSSSMAgentDockerImage:
    Description: Image for AWS Amazon SSM Agent
    Type: String
    Default: amazon-ssm-agent

  ApplicationPort:
    Type: String
    Default: 80

  TaskDefMemory:
    Type: String
    Default: 2048

  TaskDefCPU:
    Type: String
    Default: 1024

Conditions:
  IsUE1: !Equals [ !Ref AWS::Region, "us-east-1" ]
  IsDevUE1: !And
    - !Equals [ !Ref env, "dev" ]
    - !Equals [ !Ref AWS::Region, "us-east-1" ]

Resources:
  HAProxyWebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AppName
      ContainerDefinitions:
        - !If
          - IsDevUE1
          - Name: amazon-ssm-agent
            Image: !Ref AWSSSMAgentDockerImage
            Essential: true
            Cpu: 0
            EntryPoint: [ ]
            Command: [
              "/bin/bash",
              "-c",
              "set -e; yum upgrade -y; yum install jq procps awscli -y; term_handler() { echo \"Deleting SSM activation $ACTIVATION_ID\"; if ! aws ssm delete-activation --activation-id $ACTIVATION_ID --region $ECS_TASK_REGION; then echo \"SSM activation $ACTIVATION_ID failed to be deleted\" 1>&2; fi; MANAGED_INSTANCE_ID=$(jq -e -r .ManagedInstanceID /var/lib/amazon/ssm/registration); echo \"Deregistering SSM Managed Instance $MANAGED_INSTANCE_ID\"; if ! aws ssm deregister-managed-instance --instance-id $MANAGED_INSTANCE_ID --region $ECS_TASK_REGION; then echo \"SSM Managed Instance $MANAGED_INSTANCE_ID failed to be deregistered\" 1>&2; fi; kill -SIGTERM $SSM_AGENT_PID; }; trap term_handler SIGTERM SIGINT; if [[ -z $MANAGED_INSTANCE_ROLE_NAME ]]; then echo \"Environment variable MANAGED_INSTANCE_ROLE_NAME not set, exiting\" 1>&2; exit 1; fi; if ! ps ax | grep amazon-ssm-agent | grep -v grep > /dev/null; then if [[ -n $ECS_CONTAINER_METADATA_URI_V4 ]] ; then echo \"Found ECS Container Metadata, running activation with metadata\"; TASK_METADATA=$(curl \"${ECS_CONTAINER_METADATA_URI_V4}/task\"); ECS_TASK_AVAILABILITY_ZONE=$(echo $TASK_METADATA | jq -e -r '.AvailabilityZone'); ECS_TASK_ARN=$(echo $TASK_METADATA | jq -e -r '.TaskARN'); ECS_TASK_REGION=$(echo $ECS_TASK_AVAILABILITY_ZONE | sed 's/.$//'); ECS_TASK_AVAILABILITY_ZONE_REGEX='^(af|ap|ca|cn|eu|me|sa|us|us-gov)-(central|north|(north(east|west))|south|south(east|west)|east|west)-[0-9]{1}[a-z]{1}$'; if ! [[ $ECS_TASK_AVAILABILITY_ZONE =~ $ECS_TASK_AVAILABILITY_ZONE_REGEX ]]; then echo \"Error extracting Availability Zone from ECS Container Metadata, exiting\" 1>&2; exit 1; fi; ECS_TASK_ARN_REGEX='^arn:(aws|aws-cn|aws-us-gov):ecs:[a-z0-9-]+:[0-9]{12}:task/[a-zA-Z0-9_-]+/[a-zA-Z0-9]+$'; if ! [[ $ECS_TASK_ARN =~ $ECS_TASK_ARN_REGEX ]]; then echo \"Error extracting Task ARN from ECS Container Metadata, exiting\" 1>&2; exit 1; fi; CREATE_ACTIVATION_OUTPUT=$(aws ssm create-activation --iam-role $MANAGED_INSTANCE_ROLE_NAME --tags Key=ECS_TASK_AVAILABILITY_ZONE,Value=$ECS_TASK_AVAILABILITY_ZONE Key=ECS_TASK_ARN,Value=$ECS_TASK_ARN Key=FAULT_INJECTION_SIDECAR,Value=true --region $ECS_TASK_REGION); ACTIVATION_CODE=$(echo $CREATE_ACTIVATION_OUTPUT | jq -e -r .ActivationCode); ACTIVATION_ID=$(echo $CREATE_ACTIVATION_OUTPUT | jq -e -r .ActivationId); if ! amazon-ssm-agent -register -code $ACTIVATION_CODE -id $ACTIVATION_ID -region $ECS_TASK_REGION; then echo \"Failed to register with AWS Systems Manager (SSM), exiting\" 1>&2; exit 1; fi; amazon-ssm-agent & SSM_AGENT_PID=$!; wait $SSM_AGENT_PID; else echo \"ECS Container Metadata not found, exiting\" 1>&2; exit 1; fi; else echo \"SSM agent is already running, exiting\" 1>&2; exit 1; fi"
            ]
            Environment:
              - Name: MANAGED_INSTANCE_ROLE_NAME
                Value: lobadmin-managed-fis-ssm-instance
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref SSMLogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: !Ref AppName
          - !Ref "AWS::NoValue"
      Cpu: !Ref TaskDefCPU
      Memory: !Ref TaskDefMemory
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${ApplicationIAMRole}
      TaskRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/lobadmin-managed-ecs-instance-default
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: application_name
          Value: !Ref AppName
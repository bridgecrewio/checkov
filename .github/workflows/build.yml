name: build

on:
  workflow_dispatch: 
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - 'INTHEWILD.md'
      - 'README.md'
      - '.github/**'

concurrency:
  group: 'build'
  cancel-in-progress: true

jobs:
  integration-tests:
    strategy:
      fail-fast: true
      matrix:
        python: ["3.7", "3.8", "3.9", "3.10"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/setup-node@v2
      - uses: azure/setup-helm@v1  # don't update till fixed https://github.com/Azure/setup-helm/issues/59
      - name: Install pipenv
        run: |
          python -m pip install --no-cache-dir --upgrade pipenv
      - uses: imranismail/setup-kustomize@v1
        if: ${{ runner.os != 'windows' }}
      - name: Build & install checkov package
        run: |
          pipenv --python ${{ matrix.python }}
          pipenv run pip install --upgrade pip==21.1.1
          pipenv run pip install pytest pytest-xdist
          pipenv run python setup.py sdist bdist_wheel
          bash -c 'pipenv run pip install dist/checkov-*.whl'
      - name: Clone Terragoat - vulnerable terraform
        run: git clone https://github.com/bridgecrewio/terragoat
      - name: Clone Cfngoat - vulnerable cloudformation
        run: git clone https://github.com/bridgecrewio/cfngoat
      - name: Clone Kubernetes-goat - vulnerable kubernetes
        run: git clone https://github.com/madhuakula/kubernetes-goat
      - name: Create checkov reports
        run: |
          # Just making sure the API key tests don't run on PRs
          bash -c './integration_tests/prepare_data.sh "${{ matrix.os }}" "${{ matrix.python }}"'
        env:
          LOG_LEVEL: INFO
          BC_KEY: ${{ secrets.BC_API_KEY }}
      - name: Run integration tests
        run: |
          pipenv run pytest integration_tests
  prisma-tests:
    runs-on: [ self-hosted, public, linux, x64 ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install pipenv
        run: |
          python -m pip install --no-cache-dir --upgrade pipenv
      - name: Clone Terragoat - vulnerable terraform
        run: git clone https://github.com/bridgecrewio/terragoat
      - name: Build & install checkov package
        run: |
          pipenv --python 3.7
          pipenv run pip install --upgrade pip==21.1.1
          pipenv run pip install pytest pytest-xdist
          pipenv run python setup.py sdist bdist_wheel
          pipenv run pip install dist/checkov-*.whl
      - name: Run checkov with Prisma creds
        env:
          PRISMA_KEY: ${{ secrets.PRISMA_KEY }}
          PRISMA_API_URL: ${{ secrets.PRISMA_API_URL }}
        run: |
          pipenv run checkov -s -d terragoat --bc-api-key $PRISMA_KEY --repo-id yuvalyacoby/terragoat > checkov_report_prisma.txt
          grep "prismacloud.io" checkov_report_prisma.txt
          exit $?
  unit-tests:
    timeout-minutes: 30
    runs-on: [self-hosted, public, linux, x64]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install pipenv
        run: |
          python -m pip install --no-cache-dir --upgrade pipenv
      - name: Install dependencies
        run: |
          pipenv --python 3.7
          pipenv install --dev
      - uses: imranismail/setup-kustomize@v1
      - name: Test with pytest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pipenv run python -m pytest tests
  bump-version:
    needs: [integration-tests, unit-tests, prisma-tests]
    runs-on: [self-hosted, public, linux, x64]
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install pipenv
        run: |
          python -m pip install --no-cache-dir --upgrade pipenv
      - name: Install dependencies
        run: |
          pipenv --python 3.7
          pipenv install
      - name: version
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          ## update docs
          export PYTHONPATH='.'
          git pull

          for i in cloudformation terraform kubernetes serverless arm dockerfile secrets github_configuration gitlab_configuration all
          do
            export scansdoc="docs/5.Policy Index/$i.md"
            echo "---" > "$scansdoc"
            echo "layout: default" >> "$scansdoc"
            echo "title: $i resource scans" >> "$scansdoc"
            echo "nav_order: 1" >> "$scansdoc"
            echo "---" >> "$scansdoc"
            echo "" >> "$scansdoc"
            echo "# $i resource scans (auto generated)" >> "$scansdoc"
            echo "" >> "$scansdoc"
            pipenv run python checkov/main.py --list --framework "$i" >> "$scansdoc"
          done

          #add cloudformation scans to serverless
          export scansdoc="docs/5.Policy Index/serverless.md"
          pipenv run python checkov/main.py --list --framework cloudformation >> "$scansdoc"
          git add "docs/5.Policy Index/*"
          git commit --reuse-message=HEAD@{1} || echo "No changes to commit"
          
          git config --global user.name 'schosterbarak'
          git config --global user.email 'schosterbarak@users.noreply.github.com'

          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest tag: $latest_tag"
          new_tag=$(echo $latest_tag | awk -F. -v a="$1" -v b="$2" -v c="$3" '{printf("%d.%d.%d", $1+a, $2+b , $3+1)}')

          echo "new tag: $new_tag"          
          ## update python version
          echo "version = '$new_tag'" > 'checkov/version.py'
          echo "checkov==$new_tag" > 'kubernetes/requirements.txt'

          git commit --reuse-message=HEAD@{1} checkov/version.py kubernetes/requirements.txt || echo "No changes to commit"
          git push origin
          git tag $new_tag
          git push --tags
          RELEASE_NOTE=$(git log -1 --pretty=%B)
          echo "::set-output name=version::$new_tag"
          echo "::set-output name=notes::$RELEASE_NOTE"
        id: version
      - name: release
        uses: actions/create-release@v1
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ steps.version.outputs.version }}
          body: ${{ steps.version.outputs.notes }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
    outputs:
      version: ${{ steps.version.outputs.version }}
  publish-package:
    needs: bump-version
    runs-on: [self-hosted, public, linux, x64]
    steps:
      - uses: actions/checkout@v2
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install pipenv
        run: |
          python -m pip install --no-cache-dir --upgrade pipenv
      - name: Install dependencies
        run: |
          pipenv --python 3.7
          pipenv install --dev
      - name: create python package
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch --tags
          git pull
          pipenv run python setup.py sdist bdist_wheel
      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
      - name: sleep and wait for package to refresh
        run: |
          sleep 2m
    outputs:
      version: ${{ needs.bump-version.outputs.version }}
  publish-checkov-dockerhub:
    runs-on: [self-hosted, public, linux, x64]
    needs: publish-package
    steps:
      - uses: actions/checkout@v2
      - name: Get release version
        id: get_version
        run: |
          checkov_version=${{ needs.publish-package.outputs.version }}
          checkov_major_version=$(echo "${checkov_version}" | head -c1)
          echo ::set-env name=RELEASE_VERSION::$(echo $checkov_version)
          echo ::set-env name=RELEASE_MAJOR_VERSION::$(echo $checkov_major_version)
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: bridgecrew/checkov
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          buildoptions: "--no-cache"
          tags: "latest,${{ env.RELEASE_VERSION }},${{ env.RELEASE_MAJOR_VERSION }}"
  publish-checkov-k8s-dockerhub:
    runs-on: [self-hosted, public, linux, x64]
    needs: publish-package
    steps:
      - uses: actions/checkout@v2
      - name: update checkov-k8s version
        run: |
          checkov_version=${{ needs.publish-package.outputs.version }}
          checkov_major_version=$(echo "${checkov_version}" | head -c1)
          echo ::set-env name=RELEASE_VERSION::$(echo $checkov_version)
          echo ::set-env name=RELEASE_MAJOR_VERSION::$(echo $checkov_major_version)
          echo $RELEASE_VERSION
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: bridgecrew/checkov-k8s
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tags: "latest,${{ env.RELEASE_VERSION }},${{ env.RELEASE_MAJOR_VERSION }}"
          dockerfile: kubernetes/Dockerfile
          buildoptions: "--no-cache"
  update-bridgecrew-projects:
    needs: publish-checkov-dockerhub
    runs-on: [self-hosted, public, linux, x64]
    environment: release
    steps:
      - uses: actions/checkout@v2
      - name: update checkov release
        run: |
          curl -X POST "https://jenkins-webhook.bridgecrew.cloud/buildByToken/build?job=Open-Source/upgrade-checkov&token=${{ secrets.BC_JENKINS_TOKEN }}"
          curl -XPOST -u "${{ secrets.GH_PAT_USE}}:${{secrets.GH_PAT_SECRET}}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/bridgecrewio/checkov-action/dispatches --data '{"event_type": "build"}'

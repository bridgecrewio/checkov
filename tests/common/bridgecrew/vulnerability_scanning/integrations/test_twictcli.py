import os
import responses
import requests
from unittest import mock

from checkov.common.bridgecrew.vulnerability_scanning.integrations.package_scanning import PackageScanningIntegration
from checkov.common.bridgecrew.vulnerability_scanning.integrations.twistcli import TwistcliIntegration


def get_report_url() -> str:
    base_url = "https://www.bridgecrew.cloud/api/v1/vulnerabilities"
    return f"{base_url}/twistcli?os=linux"


def get_twistcli_integration_instance() -> TwistcliIntegration:
    # we can't create instance of TwistcliIntegration as it is abstract class
    # instead of that we create PackageScanningIntegration-instance and treat it as it is TwistcliIntegration-instance
    # (by specifying the return value in the function)
    # note that it was equal if we would use DockerImageScanningIntegration-instance instead
    return PackageScanningIntegration()


@responses.activate
@mock.patch.dict(os.environ, {"REQUEST_MAX_TRIES": "5", "SLEEP_BETWEEN_REQUEST_TRIES": "0.01"})
def test_request_wrapper_all_fail():
    # given
    mock_url = get_report_url()
    responses.add(
        method=responses.GET,
        url=mock_url,
        json={'error': "mocked client error"},
        status=403
    )
    try:
        twistcli_integration_instance = get_twistcli_integration_instance()
        twistcli_integration_instance.request_wrapper("GET", mock_url, {})
        assert False, "\'request_wrapper\' is expected to fail in this scenario"
    except requests.exceptions.HTTPError:
        responses.assert_call_count(mock_url, 5)


@responses.activate
@mock.patch.dict(os.environ, {"REQUEST_MAX_TRIES": "3", "SLEEP_BETWEEN_REQUEST_TRIES": "0.01"})
def test_request_wrapper_with_success():
    # given
    mock_url = get_report_url()
    responses.add(
        method=responses.GET,
        url=mock_url,
        json={},
        status=200
    )
    twistcli_integration_instance = get_twistcli_integration_instance()
    twistcli_integration_instance.request_wrapper("GET", mock_url, {})
    responses.assert_call_count(mock_url, 1)

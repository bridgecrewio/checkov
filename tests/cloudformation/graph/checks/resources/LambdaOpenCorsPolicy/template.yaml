Resources:
  ValidLambdaFunctionWithoutUrl:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt ExampleRole.Arn
      Code:
        S3Bucket: example-bucket
        S3Key: lambda_function_payload.zip

  ValidLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: example_lambda_function
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt ExampleRole.Arn
      Code:
        S3Bucket: example-bucket
        S3Key: lambda_function_payload.zip

  ValidLambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      FunctionName: !Ref ValidLambdaFunction
      Cors:
        AllowOrigins:
          - https://example.com
        AllowMethods:
          - GET
          - POST
      ServiceToken: "arn:aws:lambda:us-west-2:123456789012:function:dummy-token" # checkov:skip=CKV_SECRET_6 test secret

  ValidLambdaFunctionNoCorsDefinition:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: example_lambda_function
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt ExampleRole.Arn
      Code:
        S3Bucket: example-bucket
        S3Key: lambda_function_payload.zip

  ValidLambdaUrlNoCorsDefinition:
    Type: AWS::Lambda::Url
    Properties:
      FunctionName: !Ref ValidLambdaFunctionNoCorsDefinition
      ServiceToken: "arn:aws:lambda:us-west-2:123456789012:function:dummy-token" # checkov:skip=CKV_SECRET_6 test secret

  ValidLambdaFunctionOnlyOriginsStar:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: example_lambda_function
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt ExampleRole.Arn
      Code:
        S3Bucket: example-bucket
        S3Key: lambda_function_payload.zip

  ValidLambdaUrlOnlyOriginsStar:
    Type: AWS::Lambda::Url
    Properties:
      FunctionName: !Ref ValidLambdaFunctionOnlyOriginsStar
      Cors:
        AllowOrigins:
          - "*"
        AllowMethods:
          - GET
          - POST
      ServiceToken: "arn:aws:lambda:us-west-2:123456789012:function:dummy-token" # checkov:skip=CKV_SECRET_6 test secret

  ValidLambdaFunctionOnlyMethodsStar:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: example_lambda_function
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt ExampleRole.Arn
      Code:
        S3Bucket: example-bucket
        S3Key: lambda_function_payload.zip

  ValidLambdaUrlOnlyMethodsStar:
    Type: AWS::Lambda::Url
    Properties:
      FunctionName: !Ref ValidLambdaFunctionOnlyMethodsStar
      Cors:
        AllowOrigins:
          - https://example.com
        AllowMethods:
          - "*"
      ServiceToken: "arn:aws:lambda:us-west-2:123456789012:function:dummy-token" # checkov:skip=CKV_SECRET_6 test secret

  InvalidLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: example_lambda_function
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt ExampleRole.Arn
      Code:
        S3Bucket: example-bucket
        S3Key: lambda_function_payload.zip

  InvalidLambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      FunctionName: !Ref InvalidLambdaFunction
      Cors:
        AllowOrigins:
          - "*"
        AllowMethods:
          - "*"
      ServiceToken: "arn:aws:lambda:us-west-2:123456789012:function:dummy-token" # checkov:skip=CKV_SECRET_6 test secret

  ExampleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: example_role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
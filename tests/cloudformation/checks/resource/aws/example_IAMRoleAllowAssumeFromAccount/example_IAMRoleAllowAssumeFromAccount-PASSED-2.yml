AWSTemplateFormatVersion: "2010-09-09"
Description: "Elastic Container Service"

Parameters:
  ClusterName:
    Type: String
    Description: "ECS Cluster Name"

  ContainerStopTimeout:
    Type: Number
    Description: "Time in seconds that ECS should wait after issuing a docker stop before issuing a docker kill to a container"
    Default: 90
    MinValue: 30

  DataDogApiKey:
    Type: String
    Description: "Data Dog API Key"
    Default: ""
    NoEcho: true

  EbsRootSize:
    Type: Number
    Description: "The size in GB for the root EBS mount"
    Default: 100
    MinValue: 30

  EfsFileSystemId:
    Type: String
    Description: "EFS File System ID"
    Default: ""

  EfsMountPoint:
    Type: String
    Description: "EFS Mount Point"
    Default: "/mnt/efs"

  InfraBucketName:
    Type: String
    Description: "Infrastructure Bucket Name"

  InstallDatadogAgent:
    Type: String
    Description: "Specifies if the Datadog agent is to be installed"
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

  InstanceType:
    Type: String
    Description: "ECS Cluster Instance Type"
    Default: "m4.xlarge"

  ContainerReservedMemoryAverage:
    Type: Number
    Description: "Average of containers reserved memory"
    Default: 5090

  MaxServicePerInstanceTypeThreshold:
    Type: Number
    Description: "ECS Cluster Instance Type capacity based on - (InstanceType Memory / ContainerReservedMemoryAverage)  + 2-"
    Default: 10

  LibratoToken:
    Type: String
    Description: "Librato Token"
    Default: ""
    NoEcho: true

  LogDriver:
    Description: "The log driver to be used with ECS"
    Type: String
    Default: none

  LogentriesKey:
    Type: String
    Default: ""
    Description: "Logentries user-key"
    NoEcho: true

  LoggingDrivers:
    Type: String
    Description: "Logging Drivers"
    Default: '["awslogs","json-file","logentries","fluentd","splunk"]'

  LogzToken:
    Type: String
    Default: ""
    Description: "Logz Token"
    NoEcho: true

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "SSH Key Pair Name"
    Default: "lh_infrastructure"

  MaxBatchSize:
    Type: Number
    Default: 1
    MinValue: 1

  MaxSize:
    Type: Number
    Default: 60
    MinValue: 0

  MinInstancesInService:
    Type: Number
    Default: 1
    MinValue: 0

  MinSize:
    Type: Number
    Default: 1
    MinValue: 0

  NvmeMountPoint1:
    Type: String
    Description: "The full path where nvme device 1 should be mounted"
    Default: ""

  NvmeMountPoint2:
    Type: String
    Description: "The full path where nvme device 2 should be mounted"
    Default: ""

  OldStyleSGName:
    Type: String
    Description: "Use the original Security group name, this option exists to allow some stacks to not have to replace the SG"
    Default: "no"

  PauseTime:
    Type: String
    Default: PT20M

  ScaleUpMemoryThreshold:
    Type: Number
    Description: "Percent RAM level at which more ECS contain instances should be added by the auto scale group"
    Default: 80
    MinValue: 50

  SplunkForwarderPass:
    Type: String
    Default: ""
    Description: "Splunk Forwarder Password"
    NoEcho: true

  SpotPrice:
    Type: Number
    Default: 0
    MinValue: 0

  SubnetIds:
    Type: CommaDelimitedList
    Description: "VPC Subnet IDs"

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC ID"

Outputs:
  AutoScalingGroupName:
    Description: "Auto Scaling Group Name"
    Value: !Ref AutoScalingGroup

  ClusterArn:
    Description: "Cluster ARN"
    Value: !GetAtt Cluster.Arn

  ClusterName:
    Description: "Cluster Name"
    Value: !Ref Cluster

  InstanceType:
    Description: "Instance Type"
    Value: !Ref InstanceType

  LaunchConfigurationName:
    Description: "Launch Configuration Name"
    Value: !Ref LaunchConfiguration

  SecurityGroupId:
    Description: "Security Group ID"
    Value: !Ref SecurityGroup

  ServiceAutoScalingRoleArn:
    Description: "Role for ECS service auto scaling"
    Value: !GetAtt ServiceAutoScalingRole.Arn

  ScalingLambda:
    Description: "Scaling Lambda"
    Value: !Ref ScalingLambda

Mappings:
  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  MachineImages:
    us-east-1:
      AMI: ami-0128839b21d19300e
    us-east-2:
      AMI: ami-0583ca2f3ce809fcb
    us-west-1:
      AMI: ami-0ac6a4a6e7e0949c4
    us-west-2:
      AMI: ami-030c9d6616d98227e

Conditions:
  SpotPricePresent: !Not [!Equals [!Ref SpotPrice, 0]]
  UseOldStyleSGName: !Equals [!Ref OldStyleSGName, "yes"]

Resources:
  AutoScalingGroup:
    DependsOn:
      - Ec2Subnets
      - EcsLifeCycle
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: !Ref MaxBatchSize
        MinInstancesInService: !If
          - SpotPricePresent
          - 0
          - !Ref MinInstancesInService
        PauseTime: !Ref PauseTime
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      LifecycleHookSpecificationList:
        - DefaultResult: CONTINUE
          HeartbeatTimeout: 1800
          LifecycleHookName: "instanceTerminating"
          LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"
          NotificationTargetARN: !GetAtt EcsLifeCycle.Outputs.LifecycleSns
          RoleARN: !GetAtt EcsLifeCycle.Outputs.AutoScalingNotificationRoleArn
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      NotificationConfigurations:
        - NotificationTypes:
            - "autoscaling:EC2_INSTANCE_TERMINATE"
          TopicARN: !GetAtt EcsLifeCycle.Outputs.LifecycleSns
      TerminationPolicies: [AllocationStrategy]
      VPCZoneIdentifier: !GetAtt Ec2Subnets.SubnetIds
      Tags:
        - Key: Name
          Value: !Ref ClusterName
          PropagateAtLaunch: true

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [MachineImages, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref SecurityGroup
      SpotPrice: !If
        - SpotPricePresent
        - !Ref SpotPrice
        - !Ref AWS::NoValue
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: !Ref EbsRootSize
            VolumeType: "gp2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          echo ECS_AVAILABLE_LOGGING_DRIVERS='${LoggingDrivers}' >> /etc/ecs/ecs.config
          echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
          echo ECS_CONTAINER_STOP_TIMEOUT=${ContainerStopTimeout}s >> /etc/ecs/ecs.config
          echo ECS_ENABLE_SPOT_INSTANCE_DRAINING=true >> /etc/ecs/ecs.config
          echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=2h >> /etc/ecs/ecs.config
          echo ECS_LOGLEVEL=info >> /etc/ecs/ecs.config

          yum install -y \
            aws-cfn-bootstrap \
            chrony \
            git \
            jq \
            logrotate \
            nfs-utils \
            python-pip \
            vim \
            wget

          pip-2.7 install awscli
          aws configure set default.region ${AWS::Region}
          systemctl start chronyd.service

          echo 'module(load="imfile")' > /etc/rsyslog.d/01-load-imfile.conf
          echo 'input(type="imfile" File="/var/log/ecs/ecs-agent.log" Tag="ecs-agent" Severity="info" Facility="local7")' > /etc/rsyslog.d/02-ecs-agent.conf
          echo '*.*  action(type="omfwd" target="127.0.0.1" port="10514" protocol="tcp" action.resumeRetryCount="100" queue.type="linkedList" queue.size="100000")' > /etc/rsyslog.d/03-forward-to-fluentd.conf
          systemctl restart rsyslog.service

          cat <<EOF > /etc/logrotate.d/docker.conf
          /var/lib/docker/containers/*/*.log {
          weekly
          rotate 5
          size 100M
          compress
          delaycompress
          }
          EOF
          logrotate -d /etc/logrotate.d/docker.conf

          if [ "${EfsFileSystemId}" != "" ]; then
            mkdir -p ${EfsMountPoint}
            chown ec2-user:ec2-user ${EfsMountPoint}
            echo "${EfsFileSystemId}.efs.${AWS::Region}.amazonaws.com:/ ${EfsMountPoint} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
            mount -a -t nfs4
          fi

          if [ "${NvmeMountPoint1}" != "" ]; then
            # Additional "instance store nvme" starts at device index 3. 0, 1, 2 are already used by root/ebs
            disk="/dev/nvme3n1"
            mkfs.ext4 -E nodiscard $disk
            mkdir -p ${NvmeMountPoint1}
            echo "$disk ${NvmeMountPoint1} ext4 defaults,noatime,nodiscard 0 0" >> /etc/fstab
            mount $disk
            chown ec2-user:ec2-user ${NvmeMountPoint1}
          fi

          if [ "${NvmeMountPoint2}" != "" ]; then
            disk="/dev/nvme4n1"
            mkfs.ext4 -E nodiscard $disk
            mkdir -p ${NvmeMountPoint2}
            echo "$disk ${NvmeMountPoint2} ext4 defaults,noatime,nodiscard 0 0" >> /etc/fstab
            mount $disk
            chown ec2-user:ec2-user ${NvmeMountPoint2}
          fi

          /opt/aws/bin/cfn-init \
            -v \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource LaunchConfiguration

          /opt/aws/bin/cfn-signal \
            -e 0 \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource AutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                region=${AWS::Region}
                stack=${AWS::StackId}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          services:
            sysvinit:
              chronyd:
                enabled: true
                ensureRunning: true
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  Ec2Subnets:
    Type: Custom::Ec2Subnets
    Properties:
      InstanceType: !Ref InstanceType
      ServiceToken: !ImportValue LambdaResourceArn
      SubnetIds: !Ref SubnetIds

  EcsLifeCycle:
    DependsOn:
      - Cluster
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${InfraBucketName}/compute/ecs-lifecycle.yml"
      Parameters:
        ClusterName: !Ref ClusterName
        ClusterArn: !GetAtt Cluster.Arn
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: Role
    Properties:
      Path: /
      Roles:
        - !Ref Role

  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub "${ClusterName}-role-${AWS::Region}"
      AssumeRolePolicyDocument: |
        {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ]
        }
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-${AWS::Region}"
          PolicyDocument: |
            {
              "Statement": [
                {
                  "Action": [
                    "cloudformation:*",
                    "ecr:*",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:GetAuthorizationToken",
                    "ecr:GetDownloadUrlForLayer",
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "ecs:UpdateContainerInstancesState",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "s3:CopyObject",
                    "s3:GetObject",
                    "s3:ListObjects",
                    "s3:PutObject",
                    "sns:Publish"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }

  # ScaleDownMemoryReservationAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   DependsOn: ScaleDownPolicy
  #   Properties:
  #     ActionsEnabled: true
  #     AlarmActions:
  #       - !Ref ScaleDownPolicy
  #     ComparisonOperator: LessThanOrEqualToThreshold
  #     EvaluationPeriods: 3
  #     MetricName: MemoryReservation
  #     Namespace: AWS/ECS
  #     Period: 60
  #     Statistic: Average
  #     Threshold: 50
  #     Unit: Percent
  #     Dimensions:
  #       - Name: ClusterName
  #         Value: !Ref ClusterName
  #
  # ScaleDownMemoryUtilizationAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   DependsOn: ScaleDownPolicy
  #   Properties:
  #     ActionsEnabled: true
  #     AlarmActions:
  #       - !Ref ScaleDownPolicy
  #     ComparisonOperator: LessThanOrEqualToThreshold
  #     EvaluationPeriods: 3
  #     MetricName: MemoryUtilization
  #     Namespace: AWS/ECS
  #     Period: 60
  #     Statistic: Average
  #     Threshold: 50
  #     Unit: Percent
  #     Dimensions:
  #       - Name: ClusterName
  #         Value: !Ref ClusterName
  #
  # ScaleDownPolicy:
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   DependsOn: AutoScalingGroup
  #   Properties:
  #     AdjustmentType: ChangeInCapacity
  #     AutoScalingGroupName: !Ref AutoScalingGroup
  #     EstimatedInstanceWarmup: 300
  #     MetricAggregationType: Average
  #     PolicyType: StepScaling
  #     StepAdjustments:
  #       - MetricIntervalUpperBound: 0
  #         ScalingAdjustment: -1

  ScaleUpMemoryReservationAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: ScaleUpPolicy
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleUpPolicy
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: !Ref ScaleUpMemoryThreshold
      Unit: Percent
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterName

  ScaleUpMemoryUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: ScaleUpPolicy
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleUpPolicy
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: !Ref ScaleUpMemoryThreshold
      Unit: Percent
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterName

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    DependsOn: AutoScalingGroup
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      EstimatedInstanceWarmup: 300
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 15
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 15
          ScalingAdjustment: 2

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !If
        - UseOldStyleSGName
        - "Allow tcp for all ports"
        - !Sub "${ClusterName} ECS sg rules"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: "10.36.4.0/22"
          Description: SSH from lh-utility us-east-1
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: "10.39.4.0/22"
          Description: SSH from lh-utility us-west-2
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: "10.36.4.0/22"
          Description: lh-utility us-east-1 to ECS dynamic host port range
          IpProtocol: tcp
          FromPort: 32768
          ToPort: 60999
        - CidrIp: "10.39.4.0/22"
          Description: lh-utility us-west-2 to ECS dynamic host port range
          IpProtocol: tcp
          FromPort: 32768
          ToPort: 60999
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"

  ScheduledRuleScalingLambda:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "cron(0 0 * * ? *)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "ScalingLambda"
              - "Arn"
          Id: "ScalingLambda"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "ScalingLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRuleScalingLambda"
          - "Arn"

  ServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-service-autoscaling-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: !Sub "${ClusterName}-service-auto-scaling-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DeleteAlarms
                Resource:
                  - "*"

  ScalingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: ecs-scaling
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
                - ecs:ListContainerInstances
                - ecs:UpdateContainerInstancesState
                - ecs:DescribeContainerInstances
                - ecs:DeregisterContainerInstance
                - autoscaling:DescribeAutoScalingGroups
                - autoscaling:SetDesiredCapacity
                - cloudwatch:PutMetricData
              Resource: '*'

  ScalingLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Sub |
          CONTAINER_MAX_CPU = 128
          CONTAINER_MAX_MEM = int(${ContainerReservedMemoryAverage})
          INSTANCE_MAX_SERVICES = int(${MaxServicePerInstanceTypeThreshold})

          import boto3
          import copy
          import datetime
          import dateutil
          ecs = boto3.client('ecs')
          cw = boto3.client('cloudwatch')
          asg = boto3.client('autoscaling')

          def lambda_handler(event, context):
              cluster_name = "${Cluster}"
              autoscaling_name = '${AutoScalingGroup}'

              autoscaling_group = asg.describe_auto_scaling_groups(
                  AutoScalingGroupNames=[
                      autoscaling_name,
                  ],
              )

              print('Calculating schedulable containers for cluster %s' % cluster_name)
              instance_list = ecs.list_container_instances(cluster=cluster_name)
              instances = ecs.describe_container_instances(cluster=cluster_name, containerInstances=instance_list['containerInstanceArns'])
              asg_desired_capacity = int(autoscaling_group['AutoScalingGroups'][0]['DesiredCapacity'])

              schedulable_containers = 0

              for instance in instances['containerInstances']:
                  remaining_resources = {resource['name']: resource for resource in instance['remainingResources']}

                  containers_by_cpu = int(remaining_resources['CPU']['integerValue'] / CONTAINER_MAX_CPU)
                  containers_by_mem = int(remaining_resources['MEMORY']['integerValue'] / CONTAINER_MAX_MEM)

                  schedulable_containers += min(containers_by_cpu, containers_by_mem)

                  print('Cluster: %s, Instance: %s, CPU Containers: %s, MEMORY Containers: %s, Schedulable containers: %s' % (cluster_name, instance['ec2InstanceId'], containers_by_cpu, containers_by_mem, min(containers_by_cpu, containers_by_mem)))

              print('Schedulable containers overall: %s' % schedulable_containers)
              print('Each instance can hold %s services' % INSTANCE_MAX_SERVICES)

              if schedulable_containers > INSTANCE_MAX_SERVICES:
                oversubscribed = int(schedulable_containers / INSTANCE_MAX_SERVICES)
                print('Oversubscribed instances: %s' % oversubscribed)
                new_capacity = asg_desired_capacity - oversubscribed
                desired_cap = asg.set_desired_capacity(
                    AutoScalingGroupName=autoscaling_name,
                    DesiredCapacity=new_capacity,
                    HonorCooldown=True,
                )
                print('Desired capacity scaled down to: %s' % new_capacity)
                return {
                  'Desired capacity scaled down to' : new_capacity
                }
              else:
                print('Capacity is ok, no change')
                return {
                  'Capacity is ok' : asg_desired_capacity
                }

      Handler: index.lambda_handler
      Role: !GetAtt ScalingLambdaRole.Arn
      Runtime: python2.7
      Timeout: 10